{"version":3,"sources":["firebase/firebase-utils.js","components/portfolio/portfolio.component.jsx","components/portfolio-list/portfolio-list.component.jsx","components/content/content.component.jsx","components/header/header.component.jsx","components/footer/footer.component.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","Portfolio","content","className","href","siteURL","alt","src","imageURL","displayInfo","PortfolioList","title","portfoliContentList","map","portfoliContent","Content","Header","Footer","antIcon","Loading3QuartersOutlined","style","fontSize","spin","App","state","loading","collection","onSnapshot","snapshot","a","docs","doc","id","data","setState","size","indicator","Layout","padding","this","textAlign","renderSpinner","renderPage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAeAA,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAgBGT,IAASU,OAXtB,IAYMC,EAAYX,IAASW,YC1BrBC,GD4BEZ,EAAf,E,YC5ByB,SAAC,GAAiB,IAAfa,EAAc,EAAdA,QAC1B,OACE,yBAAKC,UAAU,uBACb,uBAAGC,KAAMF,EAAQG,SACf,yBAAKC,IAAI,UAAUC,IAAKL,EAAQM,YAElC,4BAAKN,EAAQO,gBCLNC,G,MAAgB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,oBACrC,OACE,6BACE,4BAAKD,GACL,yBAAKR,UAAU,kBACZS,EAAoBC,KAAI,SAACC,GAAD,OACvB,kBAAC,EAAD,CAAWZ,QAASY,WCPjBC,EAAU,SAAC,GAA6B,IAA3BH,EAA0B,EAA1BA,oBACxB,OACE,6BACE,kBAAC,EAAD,CACED,MAAM,iBACNC,oBAAqBA,IAGvB,kBAAC,EAAD,CACED,MAAM,gBACNC,oBAAqBA,MCXhBI,G,MAAS,WACpB,OAAO,yBAAKb,UAAU,UAAf,mBCDIc,G,MAAS,WACpB,OAAO,yBAAKd,UAAU,UAAf,iD,SCSHe,EAAU,kBAACC,EAAA,EAAD,CAA0BC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IAuDxDC,E,kDApDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAS,EACTb,oBAAqB,IAJX,E,gEAQO,IAAD,OACYZ,EAAU0B,WACtC,0BAEoBC,WAAtB,uCAAiC,WAAOC,GAAP,eAAAC,EAAA,sDACzBjB,EAAuDgB,ENVtBE,KAAKjB,KAAI,SAACkB,GAKnD,OAJiB,aACfC,GAAID,EAAIC,IACLD,EAAIE,WMQP,EAAKC,SAAS,CAAET,SAAS,EAAOb,wBAFD,2CAAjC,yD,sCAOA,OACE,yBAAKT,UAAU,WACb,kBAAC,IAAD,CAAMgC,KAAK,QAAQC,UAAWlB,O,mCAKtB,IACJH,EAA4BsB,IAA5BtB,QAASE,EAAmBoB,IAAnBpB,OAAQD,EAAWqB,IAAXrB,OACzB,OACE,kBAAC,IAAD,KACE,kBAACA,EAAD,CAAQb,UAAU,UAChB,kBAAC,EAAD,OAEF,kBAACY,EAAD,CAASK,MAAO,CAAEkB,QAAS,WACzB,kBAAC,EAAD,CAAW1B,oBAAqB2B,KAAKf,MAAMZ,uBAE7C,kBAACK,EAAD,CAAQG,MAAO,CAAEoB,UAAW,WAC1B,kBAAC,EAAD,U,+BAON,OACE,yBAAKrC,UAAU,OACZoC,KAAKf,MAAMC,QAAUc,KAAKE,gBAAkBF,KAAKG,kB,GA/CxCC,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d104905f.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAEQtWWA_YtR-VG4y7qJeKGBU8Sh7bD5X0\",\r\n  authDomain: \"crown-db-a0e18.firebaseapp.com\",\r\n  databaseURL: \"https://crown-db-a0e18.firebaseio.com\",\r\n  projectId: \"crown-db-a0e18\",\r\n  storageBucket: \"crown-db-a0e18.appspot.com\",\r\n  messagingSenderId: \"131627979395\",\r\n  appId: \"1:131627979395:web:5c1af8e59433606f0b41b6\",\r\n  measurementId: \"G-07Y73K5FYY\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const convertCertificateSnapshotToList = (collections) => {\r\n  const transformedCertificate = collections.docs.map((doc) => {\r\n    const certificate = {\r\n      id: doc.id,\r\n      ...doc.data(),\r\n    };\r\n    return certificate;\r\n  });\r\n  return transformedCertificate;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\nimport \"./portfolio.styles.css\";\r\n\r\nexport const Portfolio = ({ content }) => {\r\n  return (\r\n    <div className=\"portfolio-container\">\r\n      <a href={content.siteURL}>\r\n        <img alt=\"monster\" src={content.imageURL} />\r\n      </a>\r\n      <h3>{content.displayInfo}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Portfolio } from \"./../portfolio/portfolio.component\";\r\nimport \"./portfolio-list.styles.css\";\r\n\r\nexport const PortfolioList = ({ title, portfoliContentList }) => {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <div className=\"portfolio-list\">\r\n        {portfoliContentList.map((portfoliContent) => (\r\n          <Portfolio content={portfoliContent} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./content.styles.css\";\r\nimport { PortfolioList } from \"../portfolio-list/portfolio-list.component\";\r\nexport const Content = ({ portfoliContentList }) => {\r\n  return (\r\n    <div>\r\n      <PortfolioList\r\n        title=\"Certifications\"\r\n        portfoliContentList={portfoliContentList}\r\n      />\r\n\r\n      <PortfolioList\r\n        title=\"Demo projects\"\r\n        portfoliContentList={portfoliContentList}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./header.styles.css\";\r\nexport const Header = () => {\r\n  return <div className=\"header\">Akshay Gautam</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./footer.styles.css\";\r\nexport const Footer = () => {\r\n  return <div className=\"footer\">Portfolio Â©2020 Created by Akshay Gautam</div>;\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Layout, Spin } from \"antd\";\nimport {\n  firestore,\n  convertCertificateSnapshotToList,\n} from \"./firebase/firebase-utils\";\nimport { Content as MyContent } from \"./components/content/content.component\";\nimport { Header as MyHeader } from \"./components/header/header.component\";\nimport { Footer as MyFooter } from \"./components/footer/footer.component\";\nimport { Loading3QuartersOutlined } from \"@ant-design/icons\";\n\nconst antIcon = <Loading3QuartersOutlined style={{ fontSize: 24 }} spin />;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      portfoliContentList: [],\n    };\n  }\n\n  componentDidMount() {\n    const portfolioCertificates = firestore.collection(\n      \"portfolio_certificates\"\n    );\n    portfolioCertificates.onSnapshot(async (snapshot) => {\n      const portfoliContentList = convertCertificateSnapshotToList(snapshot);\n      this.setState({ loading: false, portfoliContentList });\n    });\n  }\n\n  renderSpinner() {\n    return (\n      <div className=\"spinner\">\n        <Spin size=\"large\" indicator={antIcon} />\n      </div>\n    );\n  }\n\n  renderPage() {\n    const { Content, Footer, Header } = Layout;\n    return (\n      <Layout>\n        <Header className=\"header\">\n          <MyHeader />\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <MyContent portfoliContentList={this.state.portfoliContentList} />\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          <MyFooter />\n        </Footer>\n      </Layout>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loading ? this.renderSpinner() : this.renderPage()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}