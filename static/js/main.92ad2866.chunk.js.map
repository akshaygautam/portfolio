{"version":3,"sources":["certificates-section/certificate/certificate.component.jsx","firebase/firebase-utils.js","certificates-section/certificates-section.component.jsx","social-connect/social-connect.component.jsx","header/header.component.jsx","footer/footer.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Certificate","certificate","imageURL","siteURL","displayInfo","className","href","target","rel","src","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","Certificates","state","certificates","collection","onSnapshot","snapshot","a","docs","map","doc","id","data","setState","loading","filteredCertificates","this","filter","active","gutter","span","key","React","Component","SocialConnect","style","GithubOutlined","twoToneColor","LinkedinOutlined","FilePdfTwoTone","MailTwoTone","CustomHeader","fontSize","CustomFooter","textAlign","App","Content","Layout","Footer","Header","title","backgroundColor","position","zIndex","width","padding","marginTop","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92ad2866.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./certificate.styles.scss\";\r\n\r\nconst Certificate = ({ certificate }) => {\r\n  const { imageURL, siteURL, displayInfo } = certificate;\r\n  return (\r\n    <div className=\"certificate\">\r\n      <a href={siteURL} target=\"_blank\" rel=\"noopner noreferrer\">\r\n        <img\r\n          className=\"certificate-image\"\r\n          src={imageURL}\r\n          alt={displayInfo}\r\n        ></img>\r\n        <p>{displayInfo}</p>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Certificate;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAEQtWWA_YtR-VG4y7qJeKGBU8Sh7bD5X0\",\r\n  authDomain: \"crown-db-a0e18.firebaseapp.com\",\r\n  databaseURL: \"https://crown-db-a0e18.firebaseio.com\",\r\n  projectId: \"crown-db-a0e18\",\r\n  storageBucket: \"crown-db-a0e18.appspot.com\",\r\n  messagingSenderId: \"131627979395\",\r\n  appId: \"1:131627979395:web:5c1af8e59433606f0b41b6\",\r\n  measurementId: \"G-07Y73K5FYY\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const convertCertificateSnapshotToList = (collections) => {\r\n  const transformedCertificate = collections.docs.map((doc) => {\r\n    const certificate = {\r\n      id: doc.id,\r\n      ...doc.data(),\r\n    };\r\n    return certificate;\r\n  });\r\n  return transformedCertificate;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\nimport \"./certificates-section.styles.scss\";\r\nimport Certificate from \"./certificate/certificate.component\";\r\nimport {\r\n  firestore,\r\n  convertCertificateSnapshotToList,\r\n} from \"../firebase/firebase-utils\";\r\nimport { Row, Col } from \"antd\";\r\nexport class Certificates extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      certificates: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const portfolioCertificates = firestore.collection(\r\n      \"portfolio_certificates\"\r\n    );\r\n    portfolioCertificates.onSnapshot(async (snapshot) => {\r\n      const certificates = convertCertificateSnapshotToList(snapshot);\r\n      this.setState({ loading: false, certificates });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let filteredCertificates = this.state.certificates.filter(\r\n      (certificate) => certificate.active\r\n    );\r\n    return (\r\n      <div>\r\n        <Row gutter={[16, 40]}>\r\n          <Col span={8}>\r\n            {filteredCertificates.map((certificate) => (\r\n              <Certificate key={certificate.id} certificate={certificate} />\r\n            ))}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  GithubOutlined,\r\n  LinkedinOutlined,\r\n  FilePdfTwoTone,\r\n  MailTwoTone,\r\n} from \"@ant-design/icons\";\r\n\r\nconst SocialConnect = ({ style }) => {\r\n  return (\r\n    <div style={style}>\r\n      <a\r\n        href=\"https://github.com/akshaygautam\"\r\n        target=\"_blank\"\r\n        rel=\"noopner noreferrer\"\r\n      >\r\n        <GithubOutlined twoToneColor=\"#eb2f96\" />\r\n      </a>\r\n      <a\r\n        href=\"https://www.linkedin.com/in/akshay-gautam-74577a117/\"\r\n        target=\"_blank\"\r\n        rel=\"noopner noreferrer\"\r\n      >\r\n        <LinkedinOutlined twoToneColor=\"#eb2f96\" />\r\n      </a>\r\n      <a\r\n        href=\"https://www.hackerrank.com/akshaygautam\"\r\n        target=\"_blank\"\r\n        rel=\"noopner noreferrer\"\r\n      >\r\n        <img src=\"https://img.icons8.com/windows/40/000000/hackerrank.png\" />\r\n      </a>\r\n      <a\r\n        href=\"https://drive.google.com/file/d/1ZJuFFjg1Mmc7KcfhNG5c5j0LA5AHRrXp/view?usp=sharing\"\r\n        target=\"_blank\"\r\n        rel=\"noopner noreferrer\"\r\n      >\r\n        <FilePdfTwoTone />\r\n      </a>\r\n      <a\r\n        href=\"mailto:akshay.gautam2209@gmail.com\"\r\n        target=\"_blank\"\r\n        rel=\"noopner noreferrer\"\r\n      >\r\n        <MailTwoTone />\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\nexport default SocialConnect;\r\n","import React from \"react\";\r\nimport { Menu } from \"antd\";\r\nimport \"./header.styles.scss\";\r\nimport SocialConnect from \"../social-connect/social-connect.component\";\r\nconst CustomHeader = function ({ style }) {\r\n  return (\r\n    <div>\r\n      <div style={{ fontSize: \"35px\" }}>\r\n        <SocialConnect />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomHeader;\r\n","import React from \"react\";\r\nimport SocialConnect from \"../social-connect/social-connect.component\";\r\nconst CustomFooter = () => {\r\n  return (\r\n    <div style={{ textAlign: \"center\", fontSize: \"25px\" }}>\r\n      <SocialConnect />\r\n      <p style={{ fontSize: \"10px\" }}>\r\n        Portfolio Â©2020 Created by Akshay Gautam\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomFooter;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Certificates } from \"./certificates-section/certificates-section.component\";\nimport CustomHeader from \"./header/header.component\";\nimport { Layout, Breadcrumb } from \"antd\";\nimport CustomFooter from \"./footer/footer.component\";\nfunction App() {\n  const { Content, Footer, Header } = Layout;\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header\n          title=\"Akshay Gautam\"\n          style={{\n            backgroundColor: \"pink\",\n            position: \"fixed\",\n            zIndex: 1,\n            width: \"100%\",\n          }}\n        >\n          <CustomHeader />\n        </Header>\n        <Content\n          className=\"site-layout\"\n          style={{ padding: \"0 50px\", marginTop: 64 }}\n        >\n          <div\n            className=\"site-layout-background\"\n            style={{ padding: 24, minHeight: 380 }}\n          >\n            <Certificates />\n          </div>\n        </Content>\n        <Footer style={{ backgroundColor: \"pink\" }}>\n          <CustomFooter />\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}