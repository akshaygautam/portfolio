{"version":3,"sources":["logo.svg","certificates-section/certificate/certificate.component.jsx","firebase/firebase-utils.js","certificates-section/certificates-section.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Certificate","certificate","imageURL","siteURL","displayInfo","className","href","target","rel","src","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","Certificates","state","certificates","collection","onSnapshot","snapshot","a","docs","map","doc","id","data","setState","loading","filteredCertificates","this","filter","active","key","React","Component","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,8RCmB5BC,G,YAhBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACbC,EAAmCD,EAAnCC,SAAUC,EAAyBF,EAAzBE,QAASC,EAAgBH,EAAhBG,YAC3B,OACE,yBAAKC,UAAU,eACb,uBAAGC,KAAMH,EAASI,OAAO,SAASC,IAAI,sBACpC,yBACEH,UAAU,oBACVI,IAAKP,EACLQ,IAAKN,IAEP,2BAAIA,O,oCCEZO,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAgBGT,IAASU,OAXtB,IAYMC,EAAYX,IAASW,Y,GAEnBX,EAAf,E,eCvBaY,EAAb,kDACE,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,aAAc,IAHJ,EADhB,gEAQuB,IAAD,OACYH,EAAUI,WACtC,0BAEoBC,WAAtB,uCAAiC,WAAOC,GAAP,eAAAC,EAAA,sDACzBJ,EAAgDG,EDHfE,KAAKC,KAAI,SAACC,GAKnD,OAJiB,aACfC,GAAID,EAAIC,IACLD,EAAIE,WCCP,EAAKC,SAAS,CAAEC,SAAS,EAAOX,iBAFD,2CAAjC,yDAZJ,+BAmBI,IAAIY,EAAuBC,KAAKd,MAAMC,aAAac,QACjD,SAACtC,GAAD,OAAiBA,EAAYuC,UAE/B,OACE,kBAAC,IAAD,CAAKnC,UAAU,gBACZgC,EAAqBN,KAAI,SAAC9B,GAAD,OACxB,kBAAC,IAAD,CAAKwC,IAAKxC,EAAYgC,IACpB,kBAAC,EAAD,CAAaQ,IAAKxC,EAAYgC,GAAIhC,YAAaA,aA1B3D,GAAkCyC,IAAMC,WCWzBC,MAdf,WACE,OACE,yBAAKvC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKI,IAAKoC,IAAMxC,UAAU,WAAWK,IAAI,SACzC,sEAEF,6BACE,kBAAC,EAAD,SCDYoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ade3ce8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./certificate.styles.scss\";\r\n\r\nconst Certificate = ({ certificate }) => {\r\n  const { imageURL, siteURL, displayInfo } = certificate;\r\n  return (\r\n    <div className=\"certificate\">\r\n      <a href={siteURL} target=\"_blank\" rel=\"noopner noreferrer\">\r\n        <img\r\n          className=\"certificate-image\"\r\n          src={imageURL}\r\n          alt={displayInfo}\r\n        ></img>\r\n        <p>{displayInfo}</p>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Certificate;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAEQtWWA_YtR-VG4y7qJeKGBU8Sh7bD5X0\",\r\n  authDomain: \"crown-db-a0e18.firebaseapp.com\",\r\n  databaseURL: \"https://crown-db-a0e18.firebaseio.com\",\r\n  projectId: \"crown-db-a0e18\",\r\n  storageBucket: \"crown-db-a0e18.appspot.com\",\r\n  messagingSenderId: \"131627979395\",\r\n  appId: \"1:131627979395:web:5c1af8e59433606f0b41b6\",\r\n  measurementId: \"G-07Y73K5FYY\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const convertCertificateSnapshotToList = (collections) => {\r\n  const transformedCertificate = collections.docs.map((doc) => {\r\n    const certificate = {\r\n      id: doc.id,\r\n      ...doc.data(),\r\n    };\r\n    return certificate;\r\n  });\r\n  return transformedCertificate;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nexport default firebase;\r\n","import React from \"react\";\r\nimport \"./certificates-section.styles.scss\";\r\nimport Certificate from \"./certificate/certificate.component\";\r\nimport {\r\n  firestore,\r\n  convertCertificateSnapshotToList,\r\n} from \"../firebase/firebase-utils\";\r\nimport { Row, Col } from \"antd\";\r\nexport class Certificates extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      certificates: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const portfolioCertificates = firestore.collection(\r\n      \"portfolio_certificates\"\r\n    );\r\n    portfolioCertificates.onSnapshot(async (snapshot) => {\r\n      const certificates = convertCertificateSnapshotToList(snapshot);\r\n      this.setState({ loading: false, certificates });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let filteredCertificates = this.state.certificates.filter(\r\n      (certificate) => certificate.active\r\n    );\r\n    return (\r\n      <Row className=\"certificates\">\r\n        {filteredCertificates.map((certificate) => (\r\n          <Col key={certificate.id}>\r\n            <Certificate key={certificate.id} certificate={certificate} />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Certificates } from \"./certificates-section/certificates-section.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Awesome profile under development :) </h1>\n      </header>\n      <div>\n        <Certificates></Certificates>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}